% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/1.3_receiver_raster_distance_estimation.R
\name{calculate_station_distances}
\alias{calculate_station_distances}
\title{Calculate cost distances from receiver stations to all raster cells}
\usage{
calculate_station_distances(raster, receiver_frame, max_distance = NULL)
}
\arguments{
\item{raster}{A RasterLayer object representing the study area. Non-NA cells
are treated as valid locations for distance calculations.}

\item{receiver_frame}{An sf object containing receiver station locations.
Must have a 'point_id' column for station identification.}

\item{max_distance}{Numeric. Maximum distance (in map units) for calculations.
Distances beyond this threshold are set to NA. Default is NULL (no limit).}
}
\value{
A data frame in long format with the following columns:
\item{cell_id}{Unique identifier for each raster cell}
\item{x}{X coordinate of the cell center}
\item{y}{Y coordinate of the cell center}
\item{raster_value}{Original value from the input raster}
\item{station_no}{Station identifier from receiver_frame$point_id}
\item{cost_distance}{Least-cost distance from station to cell}
\item{straight_distance}{Euclidean distance from station to cell}
\item{tortuosity}{Ratio of cost distance to straight distance}
}
\description{
Computes both cost-weighted and straight-line distances from each receiver
station to all valid cells in a raster. Uses least-cost path analysis to
account for landscape constraints on signal transmission.
}
\details{
This function uses the gdistance package to perform least-cost path analysis.
The process involves:
\enumerate{
\item Creating a uniform cost surface from the raster (all valid cells = 1)
\item Building a transition matrix with 8-directional connectivity
\item Calculating accumulated cost distances using accCost()
\item Computing straight-line distances for comparison
\item Converting results to long format for analysis
}

The tortuosity metric (cost/straight distance) indicates how much the
least-cost path deviates from a straight line, with values > 1 indicating
increased path complexity.
}
\examples{
\dontrun{
# Generate receiver stations
stations <- generate_random_points(depth_raster, n_points = 5, seed = 123)

# Calculate distances with no maximum limit
distances <- calculate_station_distances(depth_raster, stations)

# Calculate distances with 1000m maximum
distances_limited <- calculate_station_distances(
  raster = depth_raster,
  receiver_frame = stations,
  max_distance = 1000
)

# Analyze tortuosity patterns
library(dplyr)
tortuosity_summary <- distances \%>\%
  group_by(station_no) \%>\%
  summarise(
    mean_tortuosity = mean(tortuosity, na.rm = TRUE),
    max_cost_dist = max(cost_distance, na.rm = TRUE)
  )
}

}
\seealso{
\code{\link{generate_random_points}}, \code{\link{generate_spaced_points}}
}
